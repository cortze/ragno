version: "3.7"

networks:
  cluster:

services:
  db:
    image: postgres:16.0-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DATABASE=${DB_DATABASE}
      - PGPORT=${DB_PORT}
    volumes:
      - type: bind
        source: ./app-data/init-db.sql
        target: /docker-entrypoint-initdb.d/docker_postgres_init.sql
      - ./app-data/postgres_db:/var/lib/postgresql/data
    networks: [ cluster ]
    ports:
      - "127.0.0.1:${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: pg_isready -U ${DB_USER} -d ${DB_DATABASE}
      interval: 10s
      timeout: 3s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.36.2
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./prometheus/
        target: /etc/prometheus/
      - ./app-data/prometheus_db:/prometheus/data

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks: [ cluster ]
    ports:
      - "127.0.0.1:9090:9090"

  ragno:
    image: "ragno:latest"
    build:
      context: .
      dockerfile: Dockerfile
    command: |
      run
      --log-level=${LOG_LEVEL}
      --db-endpoint=${DB_URL}
      --ip=${IP}
      --port=$PORT
      --metrics-ip=${METRICS_IP}
      --metrics-port=${METRICS_PORT}
      --dialers=${DIALERS}
      --ip-api-url=${IP_API_URL}
      --conn-timeout=${CONN_TIMEOUT}
      --metrics-endpoint=${METRICS_ENDPOINT}
      --snapshot-interval=${SNAPSHOT_INTERVAL}
      --deprecation-time=${DEPRECATION_TIME}
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks: [ cluster ]
    ports:
      - "${IP}:${PORT}:5001"
      - "${METRICS_IP}:${METRICS_PORT}:5080"